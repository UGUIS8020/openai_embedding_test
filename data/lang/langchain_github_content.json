[
  {
    "name": "MIGRATE.md",
    "path": "MIGRATE.md",
    "content": "# Migrating\n\nPlease see the following guides for migratin LangChain code:\n\n* Migrate to [LangChain v0.3](https://python.langchain.com/docs/versions/v0_3/)\n* Migrate to [LangChain v0.2](https://python.langchain.com/docs/versions/v0_2/)\n* Migrating from [LangChain 0.0.x Chains](https://python.langchain.com/docs/versions/migrating_chains/)\n* Upgrate to [LangGraph Memory](https://python.langchain.com/docs/versions/migrating_memory/)\n\nThe [LangChain CLI](https://python.langchain.com/docs/versions/v0_3/#migrate-using-langchain-cli) can help automatically upgrade your code to use non deprecated imports. \nThis will be especially helpful if you're still on either version 0.0.x or 0.1.x of LangChain.\n"
  },
  {
    "name": "README.md",
    "path": "README.md",
    "content": "# ü¶úÔ∏èüîó LangChain\n\n‚ö° Build context-aware reasoning applications ‚ö°\n\n[![Release Notes](https://img.shields.io/github/release/langchain-ai/langchain?style=flat-square)](https://github.com/langchain-ai/langchain/releases)\n[![CI](https://github.com/langchain-ai/langchain/actions/workflows/check_diffs.yml/badge.svg)](https://github.com/langchain-ai/langchain/actions/workflows/check_diffs.yml)\n[![PyPI - License](https://img.shields.io/pypi/l/langchain-core?style=flat-square)](https://opensource.org/licenses/MIT)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/langchain-core?style=flat-square)](https://pypistats.org/packages/langchain-core)\n[![GitHub star chart](https://img.shields.io/github/stars/langchain-ai/langchain?style=flat-square)](https://star-history.com/#langchain-ai/langchain)\n[![Open Issues](https://img.shields.io/github/issues-raw/langchain-ai/langchain?style=flat-square)](https://github.com/langchain-ai/langchain/issues)\n[![Open in Dev Containers](https://img.shields.io/static/v1?label=Dev%20Containers&message=Open&color=blue&logo=visualstudiocode&style=flat-square)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/langchain-ai/langchain)\n[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/langchain-ai/langchain)\n[![Twitter](https://img.shields.io/twitter/url/https/twitter.com/langchainai.svg?style=social&label=Follow%20%40LangChainAI)](https://twitter.com/langchainai)\n\nLooking for the JS/TS library? Check out [LangChain.js](https://github.com/langchain-ai/langchainjs).\n\nTo help you ship LangChain apps to production faster, check out [LangSmith](https://smith.langchain.com).\n[LangSmith](https://smith.langchain.com) is a unified developer platform for building, testing, and monitoring LLM applications.\nFill out [this form](https://www.langchain.com/contact-sales) to speak with our sales team.\n\n## Quick Install\n\nWith pip:\n\n```bash\npip install langchain\n```\n\nWith conda:\n\n```bash\nconda install langchain -c conda-forge\n```\n\n## ü§î What is LangChain?\n\n**LangChain** is a framework for developing applications powered by large language models (LLMs).\n\nFor these applications, LangChain simplifies the entire application lifecycle:\n\n- **Open-source libraries**: Build your applications using LangChain's open-source [building blocks](https://python.langchain.com/docs/concepts/#langchain-expression-language-lcel), [components](https://python.langchain.com/docs/concepts/), and [third-party integrations](https://python.langchain.com/docs/integrations/providers/).\n  Use [LangGraph](https://langchain-ai.github.io/langgraph/) to build stateful agents with first-class streaming and human-in-the-loop support.\n- **Productionization**: Inspect, monitor, and evaluate your apps with [LangSmith](https://docs.smith.langchain.com/) so that you can constantly optimize and deploy with confidence.\n- **Deployment**: Turn your LangGraph applications into production-ready APIs and Assistants with [LangGraph Cloud](https://langchain-ai.github.io/langgraph/cloud/).\n\n### Open-source libraries\n\n- **`langchain-core`**: Base abstractions and LangChain Expression Language.\n- **`langchain-community`**: Third party integrations.\n  - Some integrations have been further split into **partner packages** that only rely on **`langchain-core`**. Examples include **`langchain_openai`** and **`langchain_anthropic`**.\n- **`langchain`**: Chains, agents, and retrieval strategies that make up an application's cognitive architecture.\n- **[`LangGraph`](https://langchain-ai.github.io/langgraph/)**: A library for building robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph. Integrates smoothly with LangChain, but can be used without it. To learn more about LangGraph, check out our first LangChain Academy course, *Introduction to LangGraph*, available [here](https://academy.langchain.com/courses/intro-to-langgraph).\n\n### Productionization:\n\n- **[LangSmith](https://docs.smith.langchain.com/)**: A developer platform that lets you debug, test, evaluate, and monitor chains built on any LLM framework and seamlessly integrates with LangChain.\n\n### Deployment:\n\n- **[LangGraph Cloud](https://langchain-ai.github.io/langgraph/cloud/)**: Turn your LangGraph applications into production-ready APIs and Assistants.\n\n![Diagram outlining the hierarchical organization of the LangChain framework, displaying the interconnected parts across multiple layers.](docs/static/svg/langchain_stack_062024.svg \"LangChain Architecture Overview\")\n\n## üß± What can you build with LangChain?\n\n**‚ùì Question answering with RAG**\n\n- [Documentation](https://python.langchain.com/docs/tutorials/rag/)\n- End-to-end Example: [Chat LangChain](https://chat.langchain.com) and [repo](https://github.com/langchain-ai/chat-langchain)\n\n**üß± Extracting structured output**\n\n- [Documentation](https://python.langchain.com/docs/tutorials/extraction/)\n- End-to-end Example: [SQL Llama2 Template](https://github.com/langchain-ai/langchain-extract/)\n\n**ü§ñ Chatbots**\n\n- [Documentation](https://python.langchain.com/docs/tutorials/chatbot/)\n- End-to-end Example: [Web LangChain (web researcher chatbot)](https://weblangchain.vercel.app) and [repo](https://github.com/langchain-ai/weblangchain)\n\nAnd much more! Head to the [Tutorials](https://python.langchain.com/docs/tutorials/) section of the docs for more.\n\n## üöÄ How does LangChain help?\n\nThe main value props of the LangChain libraries are:\n\n1. **Components**: composable building blocks, tools and integrations for working with language models. Components are modular and easy-to-use, whether you are using the rest of the LangChain framework or not\n2. **Off-the-shelf chains**: built-in assemblages of components for accomplishing higher-level tasks\n\nOff-the-shelf chains make it easy to get started. Components make it easy to customize existing chains and build new ones.\n\n## LangChain Expression Language (LCEL)\n\nLCEL is a key part of LangChain, allowing you to build and organize chains of processes in a straightforward, declarative manner. It was designed to support taking prototypes directly into production without needing to alter any code. This means you can use LCEL to set up everything from basic \"prompt + LLM\" setups to intricate, multi-step workflows.\n\n- **[Overview](https://python.langchain.com/docs/concepts/#langchain-expression-language-lcel)**: LCEL and its benefits\n- **[Interface](https://python.langchain.com/docs/concepts/#runnable-interface)**: The standard Runnable interface for LCEL objects\n- **[Primitives](https://python.langchain.com/docs/how_to/#langchain-expression-language-lcel)**: More on the primitives LCEL includes\n- **[Cheatsheet](https://python.langchain.com/docs/how_to/lcel_cheatsheet/)**: Quick overview of the most common usage patterns\n\n## Components\n\nComponents fall into the following **modules**:\n\n**üìÉ Model I/O**\n\nThis includes [prompt management](https://python.langchain.com/docs/concepts/#prompt-templates), [prompt optimization](https://python.langchain.com/docs/concepts/#example-selectors), a generic interface for [chat models](https://python.langchain.com/docs/concepts/#chat-models) and [LLMs](https://python.langchain.com/docs/concepts/#llms), and common utilities for working with [model outputs](https://python.langchain.com/docs/concepts/#output-parsers).\n\n**üìö Retrieval**\n\nRetrieval Augmented Generation involves [loading data](https://python.langchain.com/docs/concepts/#document-loaders) from a variety of sources, [preparing it](https://python.langchain.com/docs/concepts/#text-splitters), then [searching over (a.k.a. retrieving from)](https://python.langchain.com/docs/concepts/#retrievers) it for use in the generation step.\n\n**ü§ñ Agents**\n\nAgents allow an LLM autonomy over how a task is accomplished. Agents make decisions about which Actions to take, then take that Action, observe the result, and repeat until the task is complete. LangChain provides a [standard interface for agents](https://python.langchain.com/docs/concepts/#agents), along with [LangGraph](https://github.com/langchain-ai/langgraph) for building custom agents.\n\n## üìñ Documentation\n\nPlease see [here](https://python.langchain.com) for full documentation, which includes:\n\n- [Introduction](https://python.langchain.com/docs/introduction/): Overview of the framework and the structure of the docs.\n- [Tutorials](https://python.langchain.com/docs/tutorials/): If you're looking to build something specific or are more of a hands-on learner, check out our tutorials. This is the best place to get started.\n- [How-to guides](https://python.langchain.com/docs/how_to/): Answers to ‚ÄúHow do I‚Ä¶.?‚Äù type questions. These guides are goal-oriented and concrete; they're meant to help you complete a specific task.\n- [Conceptual guide](https://python.langchain.com/docs/concepts/): Conceptual explanations of the key parts of the framework.\n- [API Reference](https://api.python.langchain.com): Thorough documentation of every class and method.\n\n## üåê Ecosystem\n\n- [ü¶úüõ†Ô∏è LangSmith](https://docs.smith.langchain.com/): Trace and evaluate your language model applications and intelligent agents to help you move from prototype to production.\n- [ü¶úüï∏Ô∏è LangGraph](https://langchain-ai.github.io/langgraph/): Create stateful, multi-actor applications with LLMs. Integrates smoothly with LangChain, but can be used without it.\n- [ü¶úüèì LangServe](https://python.langchain.com/docs/langserve): Deploy LangChain runnables and chains as REST APIs.\n\n## üíÅ Contributing\n\nAs an open-source project in a rapidly developing field, we are extremely open to contributions, whether it be in the form of a new feature, improved infrastructure, or better documentation.\n\nFor detailed information on how to contribute, see [here](https://python.langchain.com/docs/contributing/).\n\n## üåü Contributors\n\n[![langchain contributors](https://contrib.rocks/image?repo=langchain-ai/langchain&max=2000)](https://github.com/langchain-ai/langchain/graphs/contributors)\n"
  },
  {
    "name": "SECURITY.md",
    "path": "SECURITY.md",
    "content": "# Security Policy\n\n## Reporting OSS Vulnerabilities\n\nLangChain is partnered with [huntr by Protect AI](https://huntr.com/) to provide \na bounty program for our open source projects. \n\nPlease report security vulnerabilities associated with the LangChain \nopen source projects by visiting the following link:\n\n[https://huntr.com/bounties/disclose/](https://huntr.com/bounties/disclose/?target=https%3A%2F%2Fgithub.com%2Flangchain-ai%2Flangchain&validSearch=true)\n\nBefore reporting a vulnerability, please review:\n\n1) In-Scope Targets and Out-of-Scope Targets below.\n2) The [langchain-ai/langchain](https://python.langchain.com/docs/contributing/repo_structure) monorepo structure.\n3) LangChain [security guidelines](https://python.langchain.com/docs/security) to\n   understand what we consider to be a security vulnerability vs. developer\n   responsibility.\n\n### In-Scope Targets\n\nThe following packages and repositories are eligible for bug bounties:\n\n- langchain-core\n- langchain (see exceptions)\n- langchain-community (see exceptions)\n- langgraph\n- langserve\n\n### Out of Scope Targets\n\nAll out of scope targets defined by huntr as well as:\n\n- **langchain-experimental**: This repository is for experimental code and is not\n  eligible for bug bounties, bug reports to it will be marked as interesting or waste of\n  time and published with no bounty attached.\n- **tools**: Tools in either langchain or langchain-community are not eligible for bug\n  bounties. This includes the following directories\n  - langchain/tools\n  - langchain-community/tools\n  - Please review our [security guidelines](https://python.langchain.com/docs/security)\n    for more details, but generally tools interact with the real world. Developers are\n    expected to understand the security implications of their code and are responsible\n    for the security of their tools.\n- Code documented with security notices. This will be decided done on a case by\n  case basis, but likely will not be eligible for a bounty as the code is already\n  documented with guidelines for developers that should be followed for making their\n  application secure.\n- Any LangSmith related repositories or APIs see below.\n\n## Reporting LangSmith Vulnerabilities\n\nPlease report security vulnerabilities associated with LangSmith by email to `security@langchain.dev`.\n\n- LangSmith site: https://smith.langchain.com\n- SDK client: https://github.com/langchain-ai/langsmith-sdk\n\n### Other Security Concerns\n\nFor any other security concerns, please contact us at `security@langchain.dev`.\n"
  }
]